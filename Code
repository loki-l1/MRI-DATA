import numpy as np
import matplotlib.pyplot as plt
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras import layers, models
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import accuracy_score, confusion_matrix
import seaborn as sns
# Set paths
TRAIN_DIR = '/content/sample_data/Training/'
TEST_DIR = '/content/sample_data/Test'
# Image size
IMG_SIZE = (224, 224)
# Data Generators with augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    fill_mode='nearest',
    preprocessing_function=preprocess_input
)

test_datagen = ImageDataGenerator(rescale=1./255)

# Create train generator
train_generator = train_datagen.flow_from_directory(
    TRAIN_DIR,
    target_size=IMG_SIZE,
    batch_size=32,
    class_mode='binary',
    classes=['NT', 'PT'],
    shuffle=True
)
# Create test generator
test_generator = test_datagen.flow_from_directory(
    TEST_DIR,
    target_size=IMG_SIZE,
    batch_size=32,
    class_mode='binary',
    classes=['nt', 'pt'],  # Make sure these class names match your folder names
    shuffle=False
# Print counts of images
print(f'Training samples: {train_generator.samples}, Classes: {train_generator.class_indices}')
print(f'Testing samples: {test_generator.samples}, Classes: {test_generator.class_indices}')
# Check for images in training directories
for class_name in ['NT', 'PT']:
    print(f'Images in Training/{class_name}:', len(os.listdir(os.path.join(TRAIN_DIR, class_name))))
# Check for images in testing directories
for class_name in ['nt', 'pt']:  # Adjust according to your actual folder names
    print(f'Images in Testing/{class_name}:', len(os.listdir(os.path.join(TEST_DIR, class_name))))
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3))
# Freeze the layers of the base model
for layer in base_model.layers:
    layer.trainable = False
# Create a new model on top
model = models.Sequential()
model.add(base_model)
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(1, activation='sigmoid'))
# Compile the model
model.compile(optimizer=Adam(learning_rate=1e-4), loss='binary_crossentropy', metrics=['accuracy'])
# Define early stopping
early_stopping = EarlyStopping(monitor='val_accuracy', patience=5, restore_best_weights=True)

# Ensure the test generator has data
if len(test_generator) == 0:
    raise ValueError("Test generator is empty. Check your testing data paths.")

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=len(train_generator) // train_generator.batch_size,
    validation_data=test_generator,
    validation_steps=len(test_generator) // test_generator.batch_size,
    epochs=20,
    verbose=1
)
# Evaluate the model
test_loss, test_accuracy = model.evaluate(test_generator)
print(f'Test Accuracy: {test_accuracy:.2f}')
# Predictions and confusion matrix
predictions = model.predict(test_generator)
predictions = np.where(predictions > 0.5, 1, 0)

y_true = test_generator.classes
confusion_mtx = confusion_matrix(y_true, predictions)

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_mtx, annot=True, fmt='d', cmap='Blues', xticklabels=['No Tumor', 'Pituitary Tumor'], yticklabels=['No Tumor', 'Pituitary Tumor'])
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.title('Confusion Matrix')
plt.show()
# Plot training history
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()
